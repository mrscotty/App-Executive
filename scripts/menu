#!/usr/bin/env perl

local $YAML::UseCode  = 1;
local $YAML::SortKeys = 2;

use strict;
use warnings;

use lib qw( lib );
use Curses;
use Curses::UI;
use Term::Script;
use App::Executive;
use File::Path qw(make_path);
use YAML qw(LoadFile);
use POSIX 'strftime';

my $cfg = LoadFile('ex/demo.yaml') or die "Error loading YAML config: $@";

my $app = App::Executive->new( { data => $cfg } );
$app->validate() or die $@;

my $cui = Curses::UI->new(
    -clear_on_exit => 0,
    -color_support => 1,
    -debug         => $cfg->{debug},
);

############################################################
# Initialize UI
############################################################

my $win1 = $cui->add(
    'win1'  => 'Window',
    -padtop => 0,          # leave space for the menu
    -border => 0,
    -ipad   => 0
);

my $status = $win1->add(
    statusbox => 'Label',
    -border   => 0,
    -y        => $win1->height - 1,
    -width    => $win1->width,
    -bg       => "black",
    -fg       => "white",
    -text     => "This is the default status box",
);

$status->textalignment('middle');
$status->focus();
$status->draw();

my $help = $win1->add(
    helpbox   => 'TextViewer',
    -border   => 0,
    -y        => $win1->height - 3,
    -height   => 2,
    -width    => $win1->width,
    -text     => "help text",
    -wrapping => 1,
);
$help->draw();
$help->focus();

my $list1 = $win1->add(
    'list1' => 'Listbox',

    #    -values => [ $app->menu_ids() ],
    #    -labels => { $app->menu_labels() },
    -border     => 1,
    -ipad       => 1,
    -padtop     => 0,
    -padbottom  => 0,
    -vscrollbar => 1,
    -height     => $win1->height - 3,
    -title      => 'Choose Task to Execute',
    -onfocus =>
      sub { $status->text('Press <Enter> to choose task, <Ctl-Q> to quit'); },
    -onselchange => sub {

        #$help->text("this is a test");
        #return;
        my $this = shift;
        $this->{-selected} = $this->{-ypos};
        my $id = $this->get;
        $this->{-selected} = undef;
        my $helptext = $app->menuhelp($id);
        $helptext ||= '';
        chomp $helptext;
        $help->text($helptext);
    },
);

$list1->values( $app->menu_ids() );
$list1->labels( { $app->menu_labels() } );
$list1->focus();
$list1->draw();

$cui->set_binding( sub { exit(0); }, "\cQ" );
$cui->set_binding( sub { exit(0); }, "\cC" );

#$cui->set_binding( sub {
#        move_list_sel( $list1, +1 );
#    }, 258); # ArrowDn
#$cui->set_binding( sub {
#        move_list_sel( $list1, -1 );
#    }, 259); # ArrowDn
$list1->set_routine( 'option-select', \&start_runbook );

#$cui->set_binding( sub {
#        start_runbook( $cui, $list1, $app );
#    }, 343); # Enter
#

sub get_args {
    my $cui     = shift;
    my $title   = shift;
    my $argdefs = shift;
    my @args    = ();

    my $viewwin = $cui->add(
        'view_window',
        'Window',
        -border  => 1,
        -ipad    => 2,
        -height  => $win1->height - 3,
        -title   => $title,
        -onfocus => sub {
            $status->text(
'Press <Tab> to switch field, <Enter> to execute, <Ctl-C> to return to menu'
            );
        },
    );

    my $i    = 0;
    my $rowh = 2;

    # figure out label width
    my $lwidth = 0;
    foreach my $str ( map { $_->{desc} } @{$argdefs} ) {
        my $len = length($str);
        if ( $len > $lwidth ) {
            $lwidth = $len;
        }
    }
    foreach my $arg ( @{$argdefs} ) {
        my $id = $arg->{id};
        $viewwin->add(
            'label_' . $id, 'Label',
            -x             => 0,
            -y             => $i * $rowh,
            -width         => $lwidth,
            -textalignment => 'left',
            -bold          => 1,
            -text          => ( $arg->{desc} || $id ),
        );
        my $ent = $viewwin->add(
            $arg->{id} || 'val_' . $i, 'TextEntry',
            -x        => $lwidth + 1,
            -y        => $i * $rowh,
            -sbborder => 1,
            -text     => ( defined $app->opt($id) ? $app->opt($id) : '' ),
            -onfocus =>
            sub { $help->text('Help: ' . $arg->{help}||''); },
        );
        $ent->set_binding('loose-focus', KEY_DOWN());
        $ent->set_binding(sub { $_[0]->parent->focus_prev()}, KEY_UP());
        if ( not $i ) {
            $ent->focus();    # Set focus on first field
        }
        $i++;
    }
    $viewwin->set_binding(
        sub {
            my $this = shift;
            @args = &check_args( $this, $argdefs );
            $this->loose_focus;
        },
        KEY_ENTER()
    );
    $viewwin->set_binding( sub { my $this = shift; $this->loose_focus },
        "\cC" );

    $viewwin->modalfocus;
    $cui->delete('view_window');
    $cui->draw;
    return @args;
}

sub check_args {
    my $this    = shift;
    my $argdefs = shift;
    my $cui     = $this->root;
    my @args    = ();

    foreach my $arg ( @{$argdefs} ) {
        my $obj = $this->getobj( $arg->{id} );
        my $val = $obj->get;
        if ( defined $val ) {
            push @args, $arg->{id}, $val;
        }
    }
    return @args;
}

sub start_runbook {
    my $this = shift;

    # Get the selected message id.
    $this->{-selected} = $this->{-ypos};
    my $id = $this->get;
    $this->{-selected} = undef;

    if ( not defined $id ) {
        die "no id from list";
    }

    my $enabled = $app->menu_enabled($id);

    if ( not $enabled ) {
        $cui->dialog(
            -message => "You must first set the global variables for this item",
            -title   => "Important",
            -buttons => ['ok'],
        );
    }
    else {
        my @args;
        my $argdef;
        eval { $argdef = $app->args($id) };
        if ($@) {
            $cui->error( "Error getting args: " . $@ );
            exit 1;
        }

        if ( ref($argdef) eq 'ARRAY' ) {
            eval { @args = get_args( $cui, $app->menu_desc($id), $argdef ); 1; }
              or $cui->error( "Error getting args: " . $@ ) && exit 1;
        }

        my $cmd = $app->command($id);
        if ( ref($cmd) eq 'CODE' ) {
            $cmd->( $cfg, @args );
        }
        else {
            $cui->leave_curses();

            my @map_args = $app->map_args( $id, @args );
            my %args = @args;

            print "Got args: ", join( ', ', @map_args ), "\n";
            if ( not -d $app->tsdir ) {
                make_path $app->tsdir;
                if ( not -d $app->tsdir ) {
                    die "Error: creating directory '", $app->tsdir, "': $@";
                }
            }

            my $ts = Term::Script->new( file => $app->tsfile('custref') );
            $ts->run( $cmd, @args );
            print "Press '<Enter>' to return to menu: ";
            readline;

            $cui->reset_curses();
            $cui->draw();
        }
    }
}

############################################################
# Start UI
############################################################

$cui->mainloop;
