#!/usr/bin/env perl

local $YAML::UseCode = 1;
local $YAML::SortKeys = 2;

use strict;
use warnings;

use lib qw( lib );
use Curses;
use Curses::UI;
use Term::Script;
use App::Executive;
use YAML qw(LoadFile);

my $cfg = LoadFile('ex/demo.yaml') or die "Error loading YAML config: $@";

my $app = App::Executive->new( { data => $cfg } );
$app->validate() or die $@;

sub move_list_sel {
    my $list = shift;
    my $inc  = shift;

    my $pos = $list->id();
    if ( not defined $pos ) {
        warn "DEBUG: forcing pos=0";
        $pos = 0;
    }
    my $max    = scalar @{ $list->values() };
    my $newpos = $pos + $inc;
    if ( $max == 0 ) {

        # always force to 0 if list is empty
        $newpos = 0;
    }
    elsif ( $newpos < 0 ) {
        $newpos = 0;
    }
    elsif ( $newpos >= $max ) {
        $newpos = $max - 1;
    }
    $list->set_selection($newpos);
    $list->draw();
}

my $cui = Curses::UI->new(
    -clear_on_exit => 0,
    -color_support => 1,
    -debug         => $cfg->{debug},
);

############################################################
# Initialize UI
############################################################

my $win1 = $cui->add(
    'win1'  => 'Window',
    -padtop => 0,          # leave space for the menu
    -border => 0,
    -ipad   => 0
);
my $list1 = $win1->add(
    'list1' => 'Listbox',

    #    -values => [ $app->menu_ids() ],
    #    -labels => { $app->menu_labels() },
    -border     => 1,
    -ipad       => 1,
    -padtop     => 0,
    -padbottom  => 0,
    -vscrollbar => 1,
    -title      => '<ENTER> execute program, <Ctr-C> quit program',
);

$list1->values( $app->menu_ids() );
$list1->labels( { $app->menu_labels() } );
$list1->focus();
$list1->draw();

$cui->status("This is the status line.");
$cui->set_binding( sub { exit(0); }, "\cQ" );
$cui->set_binding( sub { exit(0); }, "\cC" );

#$cui->set_binding( sub {
#        move_list_sel( $list1, +1 );
#    }, 258); # ArrowDn
#$cui->set_binding( sub {
#        move_list_sel( $list1, -1 );
#    }, 259); # ArrowDn
$list1->set_routine( 'option-select', \&start_runbook );

#$cui->set_binding( sub {
#        start_runbook( $cui, $list1, $app );
#    }, 343); # Enter
#

sub get_args {
    my $cui = shift;
    my $title = shift;
    my $argdefs = shift;
    my @args = ( 'didnt do anyting' );

    my $viewwin = $cui->add('view_window', 'Window',
        -border => 1,
        -ipad => 2,
        -title => $title,
    );
    my $grey = Curses::UI::Color->new();
    $grey->define_color('grey', 250, 250, 250);

    my $i = 0;
    my $rowh = 2;
    
    # figure out label width
    my $lwidth = 0;
    foreach my $str ( map { $_->{desc} } @{ $argdefs } ) {
        my $len = length($str);
        if ( $len > $lwidth ) {
            $lwidth = $len;
        }
    }
    foreach my $arg ( @{ $argdefs } ) {
        my $id = $arg->{id};
        $viewwin->add(
            'label_' . $id, 'Label',
            -x => 0, -y => $i * $rowh, -width => $lwidth,
            -textalignment => 'left',
            -bold => 1,
            -text => ($arg->{desc} || $id),
        );
        my $ent = $viewwin->add(
            $arg->{id} || 'val_' . $i, 'TextEntry',
            -bg => $grey,
            -x => $lwidth+1, -y => $i * $rowh,
            -sbborder => 1,
            -text => (defined $cfg->{opts}->{$id} ? $cfg->{opts}->{$id} : ''),
        );
        if ( not $i ) {
            $ent->focus(); # Set focus on first field
        }
        $i++;
    }
    $viewwin->set_binding(sub{ my $this = shift; @args = &check_args($this, $argdefs); $this->loose_focus }, KEY_ENTER());
    $viewwin->modalfocus;
    $cui->delete('view_window');
    $cui->draw;
    return @args;
}

sub check_args {
    my $this = shift;
    my $argdefs = shift;
    my $cui = $this->root;
    my @args = ();

    foreach my $arg ( @{ $argdefs } ) {
        my $obj = $this->getobj($arg->{id});
        my $val = $obj->get;
        if (defined $val) {
            push @args, $arg->{id}, $val;
        }
    }
    return @args;
}

sub start_runbook {
    my $this = shift;

    # Get the selected message id.
    $this->{-selected} = $this->{-ypos};
    my $id = $this->get;
    $this->{-selected} = undef;

    if ( not defined $id ) {
        die "no id from list";
    }

    my $enabled = $app->menu_enabled($id);

    if ( not $enabled ) {
        $cui->dialog(
            -message => "You must first set the global variables for this item",
            -title   => "Important",
            -buttons => ['ok'],
        );
    }
    else {
        my @args;
        my $argdef;
        eval { $argdef = $app->args( $id )};
        if ( $@ ) {
            $cui->error("Error getting args: " . $@);
            exit 1;
        }

        if ( ref($argdef) eq 'ARRAY' ) {
            eval { @args = get_args($cui, $app->menu_desc($id), $argdef) } or 
                $cui->error("Error getting args: " . $@) && 
                exit 1;
        }

        my $cmd = $app->command($id);
        if ( ref($cmd) eq 'CODE' ) {
            #warn "DEBUG: executing code for command with args: ", join(', ', @args);
            $cmd->($cfg, @args);
        } else {
            my @map_args = $app->map_args( $id, @args );
            $cui->leave_curses();
            print "Got args: ", join(', ', @map_args), "\n";
            my $ts = Term::Script->new(file => 'tmp');
            $ts->run($cmd, @args);
            print "Press '<Enter>' to return to menu: ";
            readline;
            $cui->reset_curses();
            $cui->draw();
        }
    }

    #my $book = $books->{$cur_val};
    #warn "DEBUG: cur_val=$cur_val, book=$book";
    #
    #my @args = $book->exec();
    #warn "DEBUG: args=", join(',', @args);
    #

}

############################################################
# Start UI
############################################################

$cui->mainloop;
